# Adapted from https://github.com/Pierozi/fritz-dyndns-route53-serverless
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: FRITZ!Box DynDns Serverless API

Parameters:
  HostedZoneId:
    Description: Hosted zone ID of Domain
    Type: String
  RsDomains:
    Description: List of domains to update split by comma
    Type: String
  DynDnsUsername:
    Description: Fritz DynDns UserName
    Type: String
    Default: ""
  DynDnsPassword:
    Description: Fritz DynDns Password
    Type: String
    Default: ""
  ApiEndpointConf:
    Description: Base domain for the app
    Type: String
    Default: REGIONAL
  ApiStageName:
    Description: Api Stage
    Type: String
    Default: v1

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref ApiStageName
      EndpointConfiguration: !Ref ApiEndpointConf
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'X-Forwarded-For, Authorization'"
      DefinitionBody:
        swagger: "2.0"
        host: "api.fritz.box"
        basePath:
          Fn::Sub: ${ApiStageName}
        info:
          version:
            Fn::Sub: ${ApiStageName}
          title: "FRITZ!Box DynDns Serverless API"
        schemes:
          - https
        consumes:
          - application/json
          - application/x-www-form-urlencoded
          - application/xml
          - text/xml
        produces:
          - application/json
          - application/xml
          - text/xml
          - application/javascript
          - text/javascript
        definitions:
          RecordStatus:
            properties:
              success:
                type: boolean
        paths:
          /record:
            get:
              operationId: recordUpdate
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateRecordFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
              responses:
                '200':
                  schema:
                    items:
                      $ref: '#/definitions/RecordStatus'

  UpdateRecordFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs14.x
      Events:
        recordUpdate:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /record
            Method: get
      Environment:
        Variables:
          rsDomains: !Ref RsDomains
          username: !Ref DynDnsUsername
          password: !Ref DynDnsPassword
          hostedZoneId: !Ref HostedZoneId
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - route53:ChangeResourceRecordSets
              Resource: !Sub "arn:aws:route53:::hostedzone/${HostedZoneId}"
      InlineCode: |
        'use strict';
        const AWS = require('aws-sdk');
        const route53 = new AWS.Route53({apiVersion: '2013-04-01'});
        const { hostedZoneId, rsDomains, username, password } = process.env;
        
        /**
         * Format API Gateway response
         * @param {number} statusCode
         * @param {object} body
         */
        const createResponse = (statusCode, body) => {
          return {
            statusCode: statusCode,
            headers: {
              "Access-Control-Allow-Origin" : "*"
            },
            body: body ? JSON.stringify(body) : null
          };
        };
        
        const updateRecord = (ip, callback) => {
          const params = {
            ChangeBatch: {
              Changes: rsDomains.split(',').map((domain => {
                return {
                  Action: "UPSERT",
                  ResourceRecordSet: {
                    Name: domain,
                    ResourceRecords: [{
                      Value: ip
                    }],
                    TTL: 60,
                    Type: "A"
                  }
                }
              })),
              Comment: "FRITZ!Box records"
            },
            HostedZoneId: hostedZoneId
          };
          route53.changeResourceRecordSets(params, (err, data) => {
            callback(err, data && data.hasOwnProperty('ChangeInfo') ? data.ChangeInfo.Status : 'FAIL');
          });
        };
        
        const checkBasicAuth = (headers) => {
          if (!headers.hasOwnProperty('Authorization')) {
            return false;
          }
          const basic = new Buffer(headers.Authorization.split(' ')[1], 'base64').toString();
          const reqCredentials = basic.split(':');
        
          return !(reqCredentials[0] !== username || reqCredentials[1] !== password);
        };
        
        exports.handler = (event, context, callback) => {
          if (false === checkBasicAuth(event.headers)) {
            callback(null, createResponse(403, {"error": "Not authorized"}));
          }
          if (!event.headers.hasOwnProperty('X-Forwarded-For')) {
            callback(null, createResponse(500, {"error": "missing ip in proxy http headers"}));
          }
          updateRecord(event.headers['X-Forwarded-For'], (err, success) => {
            if (err) {
              console.error(err);
            }
            callback(err, createResponse(200, {"status": success}));
          });
        };              
